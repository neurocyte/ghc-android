#!/bin/bash
#set -x
set -e

[ -e /etc/makepkg.conf ] && source /etc/makepkg.conf
MAKEFLAGS=${MAKEFLAGS:--j6}

# Basic configuration
GHCHOME=$HOME/.ghc
BASEDIR="$(dirname $0)"
cd "$BASEDIR"
BASEDIR="$(pwd)"
if [ -z "$MIRROR_OPT" ] ; then
    if [ -d "`pwd`/mirror.git" ] ; then
        MIRROR_OPT="--reference `pwd`/mirror.git"
    fi
fi

# Basic parameters
NDK_RELEASE=${NDK_RELEASE:-r8e}
NDK_MD5=26d774b0884bcd98de08eb4de41ab532
NDK_PLATFORM=${NDK_PLATFORM:-android-14}

if [ "x$1" == "x--x86" ] ; then
    NDK_TOOLCHAIN=${NDK_TOOLCHAIN:-x86-4.7}
    NDK_TARGET=${NDK_TARGET:-i686-linux-android}
    ARCH_OPTS=""
else
    NDK_TOOLCHAIN=${NDK_TOOLCHAIN:-arm-linux-androideabi-4.7}
    NDK_TARGET=${NDK_TARGET:-arm-linux-androideabi}
    ARCH_OPTS="-fllvm"
fi

NDK_DESC=$NDK_PLATFORM-$NDK_TOOLCHAIN
NDK="$GHCHOME/$NDK_PLATFORM/$NDK_TOOLCHAIN"
NDK_ADDON_SRC="$BASEDIR/build-$NDK_DESC"
NDK_ADDON_PREFIX="$NDK/sysroot/usr"

GHC_STAGE0_SRC="$BASEDIR/stage0"
GHC_STAGE0_PREFIX="$GHCHOME/android-host"
GHC_STAGE0="$GHC_STAGE0_PREFIX/bin/ghc"

GHC_PREFIX="$NDK"
GHC_SRC="$NDK_ADDON_SRC/ghc"

NCURSES_RELEASE=5.9
NCURSES_MD5=8cb9c412e5f2d96bc6f459aa8c6282a1

GMP_RELEASE=5.1.0
GMP_MD5=69fd511e435f81a0334f14f00c7d77b3

CONFIG_SUB_SRC=${CONFIG_SUB_SRC:-/usr/share/automake-1.14}

BUILD_GCC=gcc
BUILD_ARCH=$($BUILD_GCC -v 2>&1 | grep ^Target: | cut -f 2 -d ' ')

mkdir -p "$GHCHOME"
mkdir -p "$NDK_ADDON_SRC"
mkdir -p "${BASEDIR}/tarfiles"
TARDIR="${BASEDIR}/tarfiles"

function check_md5() {
    FILENAME="$1"
    MD5="$2"
    [ -e "${FILENAME}" ] || return 1;
    [ "$(md5sum "$FILENAME" | cut -f1 -d ' ')" == "$MD5" ]
}

function apply_patches() {
    pushd $2 > /dev/null
    for p in $(find "$BASEDIR/patches" -name "$1") ; do
        echo Applying patch $p in $(pwd)
        patch -p1 < "$p"
    done
    popd > /dev/null
}

# Download and configure the Android NDK toolchain
NDK_TAR_FILE=android-ndk-${NDK_RELEASE}-linux-x86.tar.bz2
NDK_TAR_PATH="${TARDIR}/${NDK_TAR_FILE}"
NDK_PATH="$BASEDIR/android-ndk-$NDK_RELEASE"
if ! [ -d "$NDK" ] ; then
    if ! [ -d "$NDK_PATH" ] ; then
        if ! check_md5 "$NDK_TAR_PATH" "$NDK_MD5" ; then
            echo Downloading the Android NDK $NDK_RELEASE
            curl -o "${TARDIR}/${NDK_TAR_FILE}"  http://dl.google.com/android/ndk/${NDK_TAR_FILE}
            check_md5 "$NDK_TAR_PATH" "$NDK_MD5"
        fi
        echo Unpacking the Android NDK $NDK_RELEASE
        tar xf "$NDK_TAR_PATH"
    fi
    echo Preparing the Android NDK toolchain in $NDK
    "$NDK_PATH/build/tools/make-standalone-toolchain.sh" --toolchain=$NDK_TOOLCHAIN --platform=$NDK_PLATFORM --install-dir="$NDK"

    #TMP hack, fake pthread library for ghc linker
    pushd "$NDK_ADDON_PREFIX/lib" > /dev/null
    ln -s libcharset.a libpthread.a
    popd > /dev/null
fi

# Add toolchain to path
export PATH="$NDK/bin":$PATH

# Unpack ncurses
NCURSES_TAR_FILE=ncurses-${NCURSES_RELEASE}.tar.gz
NCURSES_TAR_PATH="${TARDIR}/${NCURSES_TAR_FILE}"
NCURSES_SRC="$NDK_ADDON_SRC/ncurses-${NCURSES_RELEASE}"
if ! [ -d "$NCURSES_SRC" ] ; then
    if ! check_md5 "$NCURSES_TAR_PATH" "$NCURSES_MD5" ; then
        echo Downloading ncurses $NCURSES_RELEASE
        curl -o "${TARDIR}/${NCURSES_TAR_FILE}"  http://ftp.gnu.org/pub/gnu/ncurses/${NCURSES_TAR_FILE}
        check_md5 "$NCURSES_TAR_PATH" "$NCURSES_MD5"
    fi
    (cd $NDK_ADDON_SRC; tar xf "$TARDIR/$NCURSES_TAR_FILE")
fi

if ! [ -e "$CONFIG_SUB_SRC/config.sub" ] ; then
    CONFIG_SUB_SRC=${CONFIG_SUB_SRC:-$NCURSES_SRC}
fi

# Build and install iconv
ICONV_SRC="$NDK_ADDON_SRC/iconv"
if ! [ -e "$NDK_ADDON_PREFIX/lib/libiconv.a" ] ; then
    if ! [ -d "$ICONV_SRC" ] ; then
        git clone $MIRROR_OPT https://github.com/ironsteel/iconv-android.git $ICONV_SRC

        # Update config.sub and config.guess
        cp -v "$CONFIG_SUB_SRC/config.sub" "$ICONV_SRC/build-aux"
        cp -v "$CONFIG_SUB_SRC/config.guess" "$ICONV_SRC/build-aux"
        cp -v "$CONFIG_SUB_SRC/config.sub" "$ICONV_SRC/libcharset/build-aux"
        cp -v "$CONFIG_SUB_SRC/config.guess" "$ICONV_SRC/libcharset/build-aux"

        apply_patches 'iconv-*' $ICONV_SRC
    fi

    pushd $ICONV_SRC > /dev/null
    ./configure --prefix="$NDK_ADDON_PREFIX" --host=$NDK_TARGET --build=$BUILD_ARCH --with-build-cc=$BUILD_GCC --enable-static --disable-shared
    make $MAKEFLAGS
    make install
    popd > /dev/null
fi

# Build and install ncurses
if ! [ -e "$NDK_ADDON_PREFIX/lib/libncurses.a" ] ; then
    pushd $NCURSES_SRC > /dev/null
    ./configure --prefix="$NDK_ADDON_PREFIX" --host=$NDK_TARGET --build=$BUILD_ARCH --with-build-cc=$BUILD_GCC --enable-static --disable-shared --includedir="$NDK_ADDON_PREFIX/include" --without-manpages
    echo '#undef HAVE_LOCALE_H' >> "$NCURSES_SRC/include/ncurses_cfg.h"   # TMP hack
    make $MAKEFLAGS
    make install
    popd > /dev/null
fi

# Build and install gmp
GMP_TAR_FILE=gmp-${GMP_RELEASE}.tar.xz
GMP_TAR_PATH="${TARDIR}/${GMP_TAR_FILE}"
GMP_SRC="$NDK_ADDON_SRC/gmp-${GMP_RELEASE}"
if ! [ -d "$GMP_SRC" ] ; then
    if ! check_md5 "$GMP_TAR_PATH" "$GMP_MD5" ; then
        echo Downloading gmp $GMP_RELEASE
        curl -o "${TARDIR}/${GMP_TAR_FILE}"  ftp://ftp.gmplib.org/pub/gmp-${GMP_RELEASE}/${GMP_TAR_FILE}
        check_md5 "$GMP_TAR_PATH" "$GMP_MD5"
    fi
    (cd $NDK_ADDON_SRC; tar xf "$TARDIR/$GMP_TAR_FILE")
fi
if ! [ -e "$NDK_ADDON_PREFIX/lib/libgmp.a" ] ; then
    pushd $GMP_SRC > /dev/null
    ./configure --prefix="$NDK_ADDON_PREFIX" --host=$NDK_TARGET --build=$BUILD_ARCH --with-build-cc=$BUILD_GCC --enable-static --disable-shared
    make $MAKEFLAGS
    make install
    popd > /dev/null
fi

if ! [ -e "$GHC_STAGE0" ] ; then
    # Checkout GHC
    git clone $MIRROR_OPT http://darcs.haskell.org/ghc.git/ "$GHC_STAGE0_SRC"
    apply_patches 'ghc-fix-sync-all.patch' "$GHC_STAGE0_SRC"
    pushd "$GHC_STAGE0_SRC" > /dev/null
    ./sync-all --no-dph get $MIRROR_OPT

    # Setup build.mk
    cat > mk/build.mk <<EOF
HADDOCK_DOCS       = NO
BUILD_DOCBOOK_HTML = NO
BUILD_DOCBOOK_PS   = NO
BUILD_DOCBOOK_PDF  = NO
EOF

    # Configure
    perl boot
    ./configure --prefix="$GHC_STAGE0_PREFIX"
    make $MAKEFLAGS
    make $MAKEFLAGS install
    popd > /dev/null
fi

if ! [ -d "$GHC_SRC" ] ; then
    # Checkout GHC
    git clone $MIRROR_OPT http://darcs.haskell.org/ghc.git/ "$GHC_SRC"
    apply_patches 'ghc-*' "$GHC_SRC"
    pushd "$GHC_SRC" > /dev/null
    ./sync-all --no-dph get $MIRROR_OPT

    # Setup build.mk
    cat > mk/build.mk <<EOF
Stage1Only = YES
DYNAMIC_GHC_PROGRAMS = NO
SRC_HC_OPTS     = -O -H64m
GhcStage1HcOpts = -O2 -fasm
GhcStage2HcOpts = -O2 -fasm $ARCH_OPTS
GhcHcOpts       = -Rghc-timing
GhcLibHcOpts    = -O2
GhcLibWays      = v
HADDOCK_DOCS       = NO
BUILD_DOCBOOK_HTML = NO
BUILD_DOCBOOK_PS   = NO
BUILD_DOCBOOK_PDF  = NO
EOF

    # Update config.sub and config.guess
    for x in $(find . -name "config.sub") ; do
        dir=$(dirname $x)
        cp -v "$CONFIG_SUB_SRC/config.sub" "$dir"
        cp -v "$CONFIG_SUB_SRC/config.guess" "$dir"
    done

    # Apply library patches
    apply_patches "hsc2hs-*" "$GHC_SRC/utils/hsc2hs"
    apply_patches "haskeline-*" "$GHC_SRC/libraries/haskeline"
    apply_patches "unix-*" "$GHC_SRC/libraries/unix"
    apply_patches "base-*" "$GHC_SRC/libraries/base"

    # Configure
    perl boot
    ./configure --enable-bootstrap-with-devel-snapshot --prefix="$GHC_PREFIX" --target=$NDK_TARGET --with-ghc=$GHC_STAGE0 --with-gcc=$NDK/bin/$NDK_TARGET-gcc
    popd > /dev/null
fi

pushd "$GHC_SRC" > /dev/null

function check_install_gmp_constants() {
    GMPDCHDR="libraries/integer-gmp/mkGmpDerivedConstants/dist/GmpDerivedConstants.h"
    if ! [ -e  "$GMPDCHDR" ] ; then
        if [ -e "$BASEDIR/patches/gmp-$NDK_DESC-GmpDerivedConstants.h" ] ; then
            cp -v "$BASEDIR/patches/gmp-$NDK_DESC-GmpDerivedConstants.h" "$GMPDCHDR"
        else
            echo \#\#\# Execute the following commands to generate a GmpDerivedConstants.h for your target, then run build again:
            echo \#\#\# adb push ghc-$NDK_DESC/libraries/integer-gmp/cbits/mkGmpDerivedConstants /data/local
            echo \#\#\# adb shell /data/local/mkGmpDerivedConstants \> $BASEDIR/patches/gmp-$NDK_DESC-GmpDerivedConstants.h
            echo \#\#\# adb shell rm /data/local/mkGmpDerivedConstants
            exit 1
        fi
    fi
}

make $MAKEFLAGS || true # TMP hack, see http://hackage.haskell.org/trac/ghc/ticket/7490
make $MAKEFLAGS || true # TMP hack, target mkGmpDerivedConstants fails on build host
check_install_gmp_constants
make $MAKEFLAGS || true # TMP hack, tries to execut inplace stage2
make $MAKEFLAGS || true # TMP hack, one more for luck
make install
popd > /dev/null

# Write hsc2hs wrapper
HSC2HS_TARGET=$(ls $GHC_PREFIX/bin/*-hsc2hs)
echo \#/bin/bash > $HSC2HS_TARGET
echo 'exec /usr/bin/hsc2hs --cross-compile "$@" --define=linux_android_HOST_OS=1' >> $HSC2HS_TARGET
chmod +x $HSC2HS_TARGET

# install a cabal that supports cross compilation
cabal update
cabal install Cabal cabal-install --bindir=$GHC_STAGE0_PREFIX/bin/

# Write cabal wrapper
echo \#/bin/bash > "$GHC_PREFIX/bin/$NDK_TARGET-cabal"
echo NDK=$GHC_PREFIX >> "$GHC_PREFIX/bin/$NDK_TARGET-cabal"
echo NDK_TARGET=$NDK_TARGET >> "$GHC_PREFIX/bin/$NDK_TARGET-cabal"
echo NEW_CABAL=$GHC_STAGE0_PREFIX/bin/cabal >> "$GHC_PREFIX/bin/$NDK_TARGET-cabal"
cat "$BASEDIR/patches/cabal-wrapper" >> "$GHC_PREFIX/bin/$NDK_TARGET-cabal"
chmod +x "$GHC_PREFIX/bin/$NDK_TARGET-cabal"

# Add target bindir links
function bindir_link() {
    [ -e $GHC_PREFIX/$NDK_TARGET/bin/$1 ] || \
        (echo ln -s $GHC_PREFIX/bin/*-$1 $GHC_PREFIX/$NDK_TARGET/bin/$1 ;\
        ln -s $GHC_PREFIX/bin/*-$1 $GHC_PREFIX/$NDK_TARGET/bin/$1)
}
bindir_link ghc
bindir_link ghc-pkg
bindir_link hp2ps
bindir_link hsc2hs
bindir_link cabal
